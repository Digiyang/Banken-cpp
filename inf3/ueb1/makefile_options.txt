WARNFLAGS = -W -Wall -Wextra

*-W: inhibit all waning flags

*-Wall: enables all the warnings about constructions that some users
consider questionable, and that are easy to avoid (or modify to prevent the warning),
even in conjuction with macros.

-Wall turns on the following warning flags:
    -Waddress   
    -Warray-bounds=1 (only with -O2)  
    -Wbool-compare  
    -Wbool-operation  
    -Wc++11-compat  -Wc++14-compat  
    -Wcatch-value (C++ and Objective-C++ only)  
    -Wchar-subscripts  
    -Wcomment  
    -Wduplicate-decl-specifier (C and Objective-C only) 
    -Wenum-compare (in C/ObjC; this is on by default in C++) 
    -Wenum-conversion in C/ObjC; 
    -Wformat   
    -Wformat-overflow  
    -Wformat-truncation  
    -Wint-in-bool-context  
    -Wimplicit (C and Objective-C only) 
    -Wimplicit-int (C and Objective-C only) 
    -Wimplicit-function-declaration (C and Objective-C only) 
    -Winit-self (only for C++) 
    -Wlogical-not-parentheses 
    -Wmain (only for C/ObjC and unless -ffreestanding)  
    -Wmaybe-uninitialized 
    -Wmemset-elt-size 
    -Wmemset-transposed-args 
    -Wmisleading-indentation (only for C/C++) 
    -Wmissing-attributes 
    -Wmissing-braces (only for C/ObjC) 
    -Wmultistatement-macros  
    -Wnarrowing (only for C++)  
    -Wnonnull  
    -Wnonnull-compare  
    -Wopenmp-simd 
    -Wparentheses  
    -Wpessimizing-move (only for C++)  
    -Wpointer-sign  
    -Wreorder   
    -Wrestrict   
    -Wreturn-type  
    -Wsequence-point  
    -Wsign-compare (only in C++)  
    -Wsizeof-pointer-div 
    -Wsizeof-pointer-memaccess 
    -Wstrict-aliasing  
    -Wstrict-overflow=1  
    -Wswitch  
    -Wtautological-compare  
    -Wtrigraphs  
    -Wuninitialized  
    -Wunknown-pragmas  
    -Wunused-function  
    -Wunused-label     
    -Wunused-value     
    -Wunused-variable  
    -Wvolatile-register-var  
    -Wzero-length-bounds
!!
Note that some warning flags are not implied by -Wall. 
Some of them warn about constructions that users generally
do not consider questionable, but which occasionally you might
wish to check for; others warn about constructions that are necessary
or hard to avoid in some cases, and there is no simple way to modify 
the code to suppress the warning. Some of them are enabled by -Wextra 
but many of them must be enabled individually. 
!!

*-Wextra: enables some extra warnings flags that are not enabled by -Wall.
    -Wclobbered  
    -Wcast-function-type  
    -Wdeprecated-copy (C++ only) 
    -Wempty-body  
    -Wignored-qualifiers 
    -Wimplicit-fallthrough=3 
    -Wmissing-field-initializers  
    -Wmissing-parameter-type (C only)  
    -Wold-style-declaration (C only)  
    -Woverride-init  
    -Wsign-compare (C only) 
    -Wstring-compare 
    -Wredundant-move (only for C++)  
    -Wtype-limits  
    -Wuninitialized  
    -Wshift-negative-value (in C++03 and in C99 and newer)  
    -Wunused-parameter (only with -Wunused or -Wall) 
    -Wunused-but-set-parameter (only with -Wunused or -Wall)

The option -Wextra also prints warning messages for the following cases:

    A pointer is compared against integer zero with <, <=, >, or >=.
    (C++ only) An enumerator and a non-enumerator both appear in a conditional expression.
    (C++ only) Ambiguous virtual bases.
    (C++ only) Subscripting an array that has been declared register.
    (C++ only) Taking the address of a variable that has been declared register.
    (C++ only) A base class is not initialized in the copy constructor of a derived class. 

OPTFLAGS = -std=c++17

*-std= : determine the language standard

DEBUGFLAGS = -ggdb3 -fsanitize=address

*-ggdb3: produce debugging information for use by GDB. This means to use the most expressive
format available (DWARF, stabs, or the native format if neither of those are supported), including
GDB extensions if at all possible.

*-fsanitize=address:
Enable AddressSanitizer, a fast memory error detector. Memory access instructions are instrumented 
to detect out-of-bounds and use-after-free bugs. The option enables -fsanitize-address-use-after-scope. 
See https://github.com/google/sanitizers/wiki/AddressSanitizer for more details. The run-time behavior 
can be influenced using the ASAN_OPTIONS environment variable. When set to help=1, the available options 
are shown at startup of the instrumented program. See https://github.com/google/sanitizers/wiki/AddressSanitizerFlags#run-time-flags 
for a list of supported options. The option cannot be combined with -fsanitize=thread. 
